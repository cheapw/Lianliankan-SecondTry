<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BackToMenu" xml:space="preserve">
    <value>返回主菜单</value>
  </data>
  <data name="Column" xml:space="preserve">
    <value>列</value>
  </data>
  <data name="Confirm" xml:space="preserve">
    <value>确认</value>
  </data>
  <data name="CustomDifficulty.Content" xml:space="preserve">
    <value>自定义</value>
  </data>
  <data name="CustomSettingAlert" xml:space="preserve">
    <value>所选的行和列的乘积不能为奇数，那样的话最后就会剩下一个按钮找不到伴哦！</value>
  </data>
  <data name="EasyDifficulty.Content" xml:space="preserve">
    <value>简单</value>
  </data>
  <data name="FailPrompt" xml:space="preserve">
    <value>时间到了哦，不要气馁，再试一次吧！</value>
  </data>
  <data name="GameCustomHintText" xml:space="preserve">
    <value>你的选择是：</value>
  </data>
  <data name="GameName.Text" xml:space="preserve">
    <value>你的连连看</value>
  </data>
  <data name="HardDifficulty.Content" xml:space="preserve">
    <value>困难</value>
  </data>
  <data name="Hint.Content" xml:space="preserve">
    <value>提示</value>
  </data>
  <data name="Hint_MainMenuPage.Text" xml:space="preserve">
    <value>选择难度，开始游戏：</value>
  </data>
  <data name="MediumDifficulty.Content" xml:space="preserve">
    <value>中等</value>
  </data>
  <data name="RankingListTile.Text" xml:space="preserve">
    <value>排行榜</value>
  </data>
  <data name="Reshuffle.Content" xml:space="preserve">
    <value>重新打乱</value>
  </data>
  <data name="Restart.Content" xml:space="preserve">
    <value>重新开始</value>
  </data>
  <data name="Return.Content" xml:space="preserve">
    <value>返回主菜单</value>
  </data>
  <data name="Row" xml:space="preserve">
    <value>行</value>
  </data>
  <data name="RowColumnLinkText" xml:space="preserve">
    <value>和</value>
  </data>
  <data name="StartGame.Content" xml:space="preserve">
    <value>开始游戏</value>
  </data>
  <data name="StartGameHintText.Text" xml:space="preserve">
    <value>马上开始游戏吧！</value>
  </data>
  <data name="SuccessPrompt" xml:space="preserve">
    <value>恭喜挑战成功，啦啦啦！</value>
  </data>
  <data name="SystemPrompts" xml:space="preserve">
    <value>系统提示</value>
  </data>
  <data name="TryAgainPrompt" xml:space="preserve">
    <value>再玩一次</value>
  </data>
</root>